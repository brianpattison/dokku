#!/usr/bin/env bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
APP="$2"; PORT="$3"

# source in app env to get DOKKU_WAIT and any other necessary vars
[[ -f "$DOKKU_ROOT/$APP/ENV" ]] && source $DOKKU_ROOT/$APP/ENV
FILENAME="$DOKKU_ROOT/$APP/CHECKS"
WAIT="${DOKKU_WAIT:-5}"

# Check to see if the container is running
if [[ -f $DOKKU_ROOT/$APP/CONTAINER ]]; then
	oldid=$(< "$DOKKU_ROOT/$APP/CONTAINER")
	status=$(docker inspect $oldid || true)

	# Allow the app to be deployed if not running
	if ! [[ $status =~ '"Running": true' ]]; then
		echo "       App not running. Skipping checks..."
		sleep $WAIT
		exit 0
	else
		echo "       App is running. Checking that new container is ready..."
	fi
else
	# Allow the app to be deployed for the first time
	echo "       App not running. Skipping checks..."
	sleep $WAIT
	exit 0
fi

echo "       Waiting $WAIT seconds ..."
sleep $WAIT

# -q           do not use .curlrc (must come first)
# --compressed Test compression handled correctly
# --location   Follow redirects
# --insecure   Ignore SSL warnings because localhost is being used
CURL_OPTIONS="-q --compressed --location --insecure --max-time 30"
URL="http://localhost:$PORT/"

if [[ -f $DOKKU_ROOT/$APP/tls/server.key ]] && [[ -f $DOKKU_ROOT/$APP/tls/server.crt ]]; then
	URL="https://localhost:$PORT/"
fi

attempts=0
max_attempts=5
success=false

until [ $attempts -ge $max_attempts ]
do
	attempt_number=$[$attempts+1]
	echo "-----> Checking $URL Attempt $attempt_number of $max_attempts"
	if output=$(curl -I $CURL_OPTIONS $URL 2>&1); then
		if [[ "$output" =~ "HTTP/1.1 200 OK" ]]; then
			success=true
			echo "       HTTP/1.1 200 OK" && break
		fi

	fi
	attempts=$[$attempts+1]
	echo "       Expected HTTP/1.1 200 OK. Bad Response:"
	echo
	echo "       $output"
	echo
	echo "       Trying again in $WAIT seconds ..."
	sleep $WAIT
done

if $success ; then
	echo -e "       \033[32m\033[1mApp loaded successfully!\033[0m"
else
	echo "Failed to load after $max_attempts attempts."
	new_container_id=$(docker ps | grep 0.0.0.0:$PORT | awk '{print $1}')
	echo "------------------------------------------------------------"
	echo
	docker logs $new_container_id
	echo
	echo "------------------------------------------------------------"
	exit 2
fi
