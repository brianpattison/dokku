#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == redis:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

# Create .redis diretory if not exists
if [[ ! -d $DOKKU_ROOT/.redis ]]; then
    mkdir -p $DOKKU_ROOT/.redis
    chown -R dokku: $DOKKU_ROOT/.redis
fi

case "$1" in

  redis:create)
	REDIS_IMAGE=redis/$APP
	REDIS_VERSION="$3"
	if [ -z "$REDIS_VERSION" ]; then
		REDIS_VERSION="latest"
	fi

	# Check if DB container is installed
	IMAGE=$(docker images | grep "dokkuinstaller/redis" | grep "$REDIS_VERSION" |  awk '{print $3}')
	if [[ -z $IMAGE ]]; then
	  	echo "Redis image not found... Did you run 'dokku plugins-install' ?"
		exit 1
	fi

	# Check if an existing Redis volume exists
	if [[ -f "$DOKKU_ROOT/.redis/volume_$APP" ]]; then
		VOLUME="`cat $DOKKU_ROOT/.redis/volume_$APP`:/var/lib/redis"
		echo
		echo "-----> Reusing redis/$APP database"
	else
		VOLUME="/var/lib/redis"
	fi

	# Fork DB image
	ID=$(docker run -d "dokkuinstaller/redis:$DB_VERSION" echo '')
	docker wait $ID > /dev/null
	IMAGE=$(docker commit $ID)
	docker tag $IMAGE $DB_IMAGE

	# Launch container
	ID=$(docker run -v $VOLUME -p 6379 -d $REDIS_IMAGE /bin/start_redis.sh)
	sleep 4

	# Rename persistent volume
	if [[ ! -f "$DOKKU_ROOT/.redis/volume_$APP" ]]; then
		VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
		if [[ -z $VOLUME_PATH ]]; then
			echo "Your docker version is too old, please update it"
			exit 1
		fi
		echo $VOLUME_PATH > "$DOKKU_ROOT/.redis/volume_$APP"
	fi

	# Link to a potential existing app
	dokku redis:link $APP $APP
	echo
	echo "-----> Redis container created: $DB_IMAGE"
	sleep 1
	dokku redis:info $APP
	;;

  redis:delete)
    REDIS_IMAGE=redis/$APP
    # Stop the container
    ID=$(docker ps -a | grep "$REDIS_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID
    fi
    # Remove image
    IMAGE=$(docker images | grep "$REDIS_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE
    fi
    # Remove persistent volume
    HOST_DIR="$DOKKU_ROOT/.redis/volume_$APP"
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi
    echo
    echo "-----> Redis container deleted: $REDIS_IMAGE"
    ;;

  redis:info)
    REDIS_IMAGE=redis/$APP
    ID=$(docker ps -a | grep "$REDIS_IMAGE":latest |  awk '{print $1}')
    PORT=$(docker port $ID 6379 | cut -d":" -f2)
    echo
    echo "       Host: 172.17.42.1"
    echo "       Public port: $PORT"
    echo
    ;;

  redis:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        REDIS_IMAGE="redis/$3"
        ID=$(docker ps -a | grep "$REDIS_IMAGE":latest |  awk '{print $1}')
        if [[ -n "$ID" ]]; then
            PORT=$(docker port "$ID" 6379 | sed 's/0.0.0.0://')
			# Link database using dokku command
			dokku config:set $APP "REDIS_URL=redis://172.17.42.1:$PORT"
            echo
            echo "-----> $APP linked to $REDIS_IMAGE container"
        fi
    fi
    ;;

  redis:logs)
    REDIS_IMAGE=redis/$APP
    ID=$(docker ps -a | grep "$REDIS_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    redis:create <rd>					Create a Redis container
    redis:delete <rd>					Delete specified Redis container
    redis:info <rd>					Display container information
    redis:link <app> <rd>				Link an app to a Redis container
    redis:logs <rd>					Display last logs from Redis container
EOF
    ;;

esac
