#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == redis:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

function get_redis_id() {
    ID=$(docker ps -a | grep redis/"$APP":latest | awk {'print $1'})
    echo $ID
}

function get_redis_port() {
    ID=$(get_redis_id)
    PORT=$(docker port "$ID" 6379 | sed 's/0.0.0.0://')
    echo $PORT
}

case "$1" in

	redis:create)
		DB_IMAGE=redis/$APP
		DB_VERSION="$3"
		if [ -z "$DB_VERSION" ]; then
			DB_VERSION="latest"
		fi

		# Check if Redis container is installed
		IMAGE=$(docker images | grep "dokkuinstaller/redis" | grep "$DB_VERSION" |  awk '{print $3}')
		if [[ -z $IMAGE ]]; then
        	echo "Redis image not found... Did you run 'dokku plugins-install' ?"
			exit 1
		fi

		# Check if an existing DB volume exists
		if ! [[ -d "$DOKKU_ROOT/.redis/volume_$APP" ]]; then
			# Create the DB directory
			mkdir -p "$DOKKU_ROOT/.redis/volume_$APP"
			chown dokku: "$DOKKU_ROOT/.redis/volume_$APP"
			chmod 700 "$DOKKU_ROOT/.redis/volume_$APP"
		fi
		VOLUME="$DOKKU_ROOT/.redis/volume_$APP:/var/lib/redis"

		# Fork Redis image
		ID=$(docker run -d "dokkuinstaller/redis:$DB_VERSION" echo '')
		docker wait $ID > /dev/null
		IMAGE=$(docker commit $ID)
		docker tag $IMAGE $DB_IMAGE

		# Launch container
		ID=$(docker run -v $VOLUME -p 6379 -d $DB_IMAGE /bin/start_redis.sh)
		sleep 4
		echo
		echo "-----> Redis container created: $DB_IMAGE"
		sleep 1
		dokku redis:info $APP
		;;

	redis:delete)
		DB_IMAGE=redis/$APP
		# Stop the container
		ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
		if [[ ! -z $ID ]]; then
			docker stop $ID
		fi
		# Remove image
		IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}')
		if [[ ! -z $IMAGE ]]; then
			docker rmi $IMAGE
		fi
		# Remove persistent volume
		HOST_DIR="$DOKKU_ROOT/.redis/volume_$APP"
		if [[ -d $HOST_DIR ]]; then
			rm -rf $HOST_DIR
		fi
		echo
		echo "-----> Redis container deleted: $DB_IMAGE"
		;;

	redis:info)
		DB_IMAGE=redis/$APP
		ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
		IP="172.17.42.1"
		PORT=$(docker port $ID 6379 | cut -d":" -f2)
		echo
		echo "       Host: $IP"
		echo "       Public port: $PORT"
		echo
		;;

	redis:link)
		if $APP_EXISTS; then
			# Check argument
			if [[ -z $3 ]]; then
				echo "You must specify a container name"
				exit 1
			fi
			DB_IMAGE="redis/$3"
			ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
			if [[ -n "$ID" ]]; then
				PORT=$(get_redis_port)

				REDIS_URL="REDIS_URL=redis://172.17.42.1:$PORT"
				ENV_FILE="$DOKKU_ROOT/$APP/ENV"
				if [[ ! -f $ENV_FILE ]]; then
					touch $ENV_FILE
				fi
				ENV_TEMP=$(cat "${ENV_FILE}" | sed "/^export REDIS_URL=/ d")
				ENV_TEMP="${ENV_TEMP}\nexport ${REDIS_URL}"
				echo -e "$ENV_TEMP" | sed '/^$/d' | sort > $ENV_FILE
				echo
				echo "-----> $APP linked to $DB_IMAGE container"
			fi
		fi
		;;

	redis:logs)
		DB_IMAGE=redis/$APP
		ID=$(docker ps -a | grep "$DB_IMAGE" |  awk '{print $1}')
		docker logs $ID | tail -n 100
		;;

    help)
    cat && cat<<EOF
    redis:create <rd>					Create a Redis container
    redis:delete <rd>					Delete specified Redis container
    redis:info <rd>					Display container information
    redis:link <app> <rd>				Link an app to a Redis container
    redis:logs <rd>					Display last logs from Redis container
EOF
    ;;

esac
