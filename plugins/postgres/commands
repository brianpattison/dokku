#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == postgres:* ]]; then
    if [ -z $2 ] && [ $1 != postgres:list ]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

# Create .postgres diretory if not exists
if [[ ! -d $DOKKU_ROOT/.postgres ]]; then
    mkdir -p $DOKKU_ROOT/.postgres
    chown -R dokku: $DOKKU_ROOT/.postgres
fi

function check_postgres_container() {
    if [[ ! -f "$DOKKU_ROOT/.postgres/pwd_$APP" ]]; then
        echo "Unknown (or too old) PostgreSQL container"
        exit 1
    fi
}

function check_postgres_tool() {
    local tool_name="$1"
    if [[ $(whereis $tool_name | awk '{ print NF }') -eq 1 ]]; then
        echo "'${tool_name}' not found. Is the package 'postgres-client' installed?" 1>&2
        exit 1
    fi
}

function get_postgres_id() {
    ID=$(docker ps -a | grep postgres/"$APP":latest | awk {'print $1'})
    echo $ID
}

function get_postgres_port() {
    ID=$(get_postgres_id)
    PORT=$(docker port "$ID" 5432 | sed 's/0.0.0.0://')
    echo $PORT
}

function connect_to_db() {
    export PGPASSWORD=$(cat "$DOKKU_ROOT/.postgres/pwd_$APP")
    PORT=$(get_postgres_port)

    psql -h 172.17.42.1 -p $PORT -U root db
}

case "$1" in

	postgres:console)
		check_postgres_container
		check_postgres_tool psql
		connect_to_db
		;;

	postgres:create)
		DB_IMAGE=postgres/$APP
		POSTGRES_VERSION="$3"
		if [ -z "$POSTGRES_VERSION" ]; then
			POSTGRES_VERSION="latest"
		fi

		# Check if DB container is installed
		IMAGE=$(docker images | grep "dokkuinstaller/postgres" | grep "$POSTGRES_VERSION" |  awk '{print $3}')
		if [[ -z $IMAGE ]]; then
        	echo "PostgreSQL image not found... Did you run 'dokku plugins-install' ?"
			exit 1
		fi

		# Check if an existing DB volume exists
		if [[ -f "$DOKKU_ROOT/.postgres/volume_$APP" ]]; then
			VOLUME="`cat $DOKKU_ROOT/.postgres/volume_$APP`:/opt/postgres"
			echo
			echo "-----> Reusing postgres/$APP database"
		else
			VOLUME="/opt/postgres"
			# Generate a random password for DB user
			DB_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
			echo $DB_PASSWORD > "$DOKKU_ROOT/.postgres/pwd_$APP"
			chown dokku: "$DOKKU_ROOT/.postgres/pwd_$APP"
			chmod 700 "$DOKKU_ROOT/.postgres/pwd_$APP"
		fi

		# Fork DB image
		ID=$(docker run -d "dokkuinstaller/postgres:$POSTGRES_VERSION" echo '')
		docker wait $ID > /dev/null
		IMAGE=$(docker commit $ID)
		docker tag $IMAGE $DB_IMAGE

		# Launch container
		ID=$(docker run -v $VOLUME -p 5432 -d $DB_IMAGE /usr/bin/start_pgsql.sh $DB_PASSWORD)
		sleep 4

		# Rename persistent volume
		if [[ ! -f "$DOKKU_ROOT/.postgres/volume_$APP" ]]; then
			VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
			if [[ -z $VOLUME_PATH ]]; then
				echo "Your docker version is too old, please update it"
				exit 1
			fi
			echo $VOLUME_PATH > "$DOKKU_ROOT/.postgres/volume_$APP"
		fi
		echo
		echo "-----> PostgreSQL container created: $DB_IMAGE"
		sleep 1
		dokku postgres:info $APP
		;;

	postgres:delete)
		DB_IMAGE=postgres/$APP
		ID=$(get_postgres_id)
		# Stop and remove the container
		if [[ ! -z $ID ]]; then
			docker kill $ID > /dev/null
			sleep 1
			docker rm -v $ID > /dev/null
			sleep 1
		fi
		# Remove image
		IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}')
		if [[ ! -z $IMAGE ]]; then
			docker rmi $IMAGE > /dev/null
		fi
		# Remove container root password
		if [[ -f "$DOKKU_ROOT/.postgres/pwd_$APP" ]]; then
			rm -f "$DOKKU_ROOT/.postgres/pwd_$APP"
		fi
		# Remove persistent volume
		if [[ -f "$DOKKU_ROOT/.postgres/volume_$APP" ]]; then
			rm -f "$DOKKU_ROOT/.postgres/volume_$APP"
		fi

		echo
		echo "-----> PostgreSQL container deleted: $DB_IMAGE"
		;;

	postgres:dump)
		check_postgres_container
		check_postgres_tool pg_dump
		export PGPASSWORD=$(cat "$DOKKU_ROOT/.postgres/pwd_$APP")
		PORT=$(get_postgres_port)

		pg_dump -h 172.17.42.1 -p $PORT -U root -c -O db

		# echo to stderr, as stdout will probably be redirected to a file
		echo 1>&2
		echo "-----> $APP database dumped" 1>&2
		;;

	postgres:info)
		check_postgres_container
		DB_PASSWORD=$(cat "$DOKKU_ROOT/.postgres/pwd_$APP")
		PORT=$(get_postgres_port)

		echo
		echo "       Host: 172.17.42.1"
		echo "       Port: $PORT"
		echo "       User: 'root'"
		echo "       Password: '$DB_PASSWORD'"
		echo "       Database: 'db'"
		echo
		echo "       Url: 'postgres://root:$DB_PASSWORD@172.17.42.1:$PORT/db'"
		echo
		;;

	postgres:link)
		if $APP_EXISTS; then
			# Check argument
			if [[ -z $3 ]]; then
				echo "You must specify a database name"
				exit 1
			fi
			DB_IMAGE="postgres/$3"
			if [[ ! -f "$DOKKU_ROOT/.postgres/pwd_$3" ]]; then
				echo "Database is not initialized correctly. Did you run 'dokku plugins-install'?"
				exit 1
			fi
			DB_PASSWORD=$(cat "$DOKKU_ROOT/.postgres/pwd_$3")
			PORT=$(get_postgres_port)
			# Link database using dokku command
			dokku config:set $APP "DATABASE_URL=postgres://root:$DB_PASSWORD@172.17.42.1:$PORT/db"
			echo
			echo "-----> $APP linked to $DB_IMAGE database"
		fi
		;;

	postgres:logs)
		ID=$(get_postgres_id)
		docker logs $ID | tail -n 100
		;;

	postgres:list)
		CONTAINERS=$(ls $DOKKU_ROOT/.postgres/volume* 2> /dev/null | sed -e 's/_/ /' | awk '{print $2}')
		if [[ -z $CONTAINERS ]]; then
			echo "There are no PostgreSQL containers created."
		else
			echo "PostgreSQL containers:"
			for CONTAINER in $CONTAINERS; do
				echo "  - $CONTAINER"
			done
		fi
		;;

	postgres:restore)
		check_postgres_container
		check_postgres_tool psql
		connect_to_db

		echo
		echo "-----> $APP database restored"
		;;

    help)
    cat && cat<<EOF
    postgres:console <db>				Open a PostgreSQL console
    postgres:create <db> [VERSION]			Create a PostgreSQL container
    postgres:delete <db>				Delete specified PostgreSQL container
    postgres:dump <db> > dump_file.sql			Dump database data
    postgres:info <db>					Display database informations
    postgres:link <app> <db>				Link an app to a PostgreSQL database
    postgres:list					Display list of PostgreSQL containers
    postgres:logs <db>					Display last logs from PostgreSQL container
    postgres:restore <db> < dump_file.sql		Restore database data from a previous dump
EOF
    ;;

esac
